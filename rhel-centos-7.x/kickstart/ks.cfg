######################################################
# Title      : Kickstart                             #
# Date       : 2016.07.22                            #
# OS         : RHEL / CentOS 7.x (x86_64)            #
# Maintainer : Yongbok Kim (ruo91@yongbok.net)       #
######################################################
# - Workflow
# 1. cd boot -> vmlinuz -> initrd.img - > ks.cfg
# 2. pre script -> variable -> ramdisk /tmp
# 3. interactive -> partition setting -> package
# 4. post script -> cd eject -> reboot

######################################################
#                 Kickstart Global                   #
######################################################
# X-Windows
xconfig  --startxonboot

# EULA 동의
eula --agreed

# 인증 알고리즘
auth --enableshadow --passalgo=sha512

# 설치 유형
cdrom
graphical
firstboot --disable

# Chronyd 서비스 비활성화
services --disabled="chronyd"

# 키보드 맵
keyboard --vckeymap=us --xlayouts='us'

# 사용 언어
lang en_US.UTF-8 --addsupport=ko_KR.UTF-8

# root 암호 (rplinux)
rootpw --iscrypted $6$JDnNmDlNnVAQxCgu$QB.C3aGzqYF1iBNBtxcRmeydHNCH.iAJttzE..xVgrrZo1z0Hlbss830WLNx8kBlze0x0ANpNGeQ.bCWbWyNe0

# 타임 존 설정
#timezone Asia/Seoul --isUtc --nontp
timezone Etc/GMT --isUtc --nontp

# 파티션 초기화
clearpart --all --initlabel

# MBR clear
zerombr

###############################################
#              Pre script #01                 #
###############################################
%pre
# Console
# anaconda 이후 설치 화면으로 넘어가기 전 콘솔에서
# 사용자로 부터 필요한 값을 미리 입력 받기 위함.
exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6

# Bash 스크립트 사용 선언
#!/bin/bash
export PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"

# System 정보
# 서버의 Vender, Model, Serial Number 등을 출력 하기 위한 변수
DMIDECODE_MANUFACTURER="$(dmidecode -t 1 | grep 'Manufacturer' | cut -d ':' -f '2')"
DMIDECODE_PRODUCT_NAME="$(dmidecode -t 1 | grep 'Product Name' | cut -d ':' -f '2')"
DMIDECODE_SERIAL_NUMBER="$(dmidecode -t 1 | grep 'Serial Number' | cut -d ':' -f '2' | awk '{ print $1 }')"

# Processor 정보
# 프로세서 관련 정보를 출력하기 위한 변수
PROCESSOR_INFO="$(cat /proc/cpuinfo | grep 'model name' | head -n 1 | cut -d ':' -f '2')"
DMIDECODE_PROCESSOR_SOCKET_NUMBER="$(dmidecode -t 4 | grep 'Socket Designation' | wc -l)"
DMIDECODE_PROCESSOR_CORE_NUMBER="$(dmidecode -t 4 | grep 'Core Count' | head -n 1 | cut -d ':' -f '2')"
DMIDECODE_PROCESSOR_CORE_THREAD="$(dmidecode -t 4 | grep 'Thread Count' | head -n 1 | cut -d ':' -f '2')"

# Memory 정보
# 메모리 관련 정보를 출력하기 위한 변수
DMIDECODE_MEMORY_BANK="$(dmidecode -t 17 | grep -v 'No Module Installed' | grep 'Size' | wc -l)"
DMIDECODE_MEMORY_BANK_SIZE="$(dmidecode -t 17 | grep -v 'No Module Installed' | grep 'Size' | head -n 1 | cut -d ':' -f '2' | awk '{printf $1 " " $2}')"
DMIDECODE_MEMORY_PHYSICAL_INFO="$(dmidecode -t 17 | grep -v 'No Module Installed' | grep 'Size' | head -n 1 | cut -d ':' -f '2' | awk '{print $1}')"
DMIDECODE_MEMORY_CALC="$(expr $DMIDECODE_MEMORY_PHYSICAL_INFO \* $DMIDECODE_MEMORY_BANK)"

# 사용자 입력 받기
# f_ks_pre_head : 시스템 정보를 위한 정보를 표시 해주기 위한 함수.
# f_ks_pre_body : 사용자로 부터 입력을 받기 위한 함수.
function f_ks_pre_head {
  echo
  echo "####################################################################"
  echo "#                        Kick Start Pre Script                     #"
  echo "####################################################################"
  echo "# Company         : Yongbok.net                                    #"
  echo "# Maintainer      : Yongbok Kim (ruo91@yongbok.net)                #"
  echo "####################################################################"
  echo "- System Information"
  echo "    Manufacturer  :$DMIDECODE_MANUFACTURER"
  echo "    Product Name  :$DMIDECODE_PRODUCT_NAME"
  echo "    Serial Number : $DMIDECODE_SERIAL_NUMBER"
  echo "####################################################################"
  echo "    Processor     :$PROCESSOR_INFO"
  echo "                  : $DMIDECODE_PROCESSOR_SOCKET_NUMBER socket /$DMIDECODE_PROCESSOR_CORE_NUMBER core /$DMIDECODE_PROCESSOR_CORE_THREAD thread"
  echo "    Memory        : $DMIDECODE_MEMORY_CALC MB ($DMIDECODE_MEMORY_BANK_SIZE x $DMIDECODE_MEMORY_BANK EA)"
  echo "####################################################################"
}

function f_ks_pre_body {
  # Hostname과 Network 정보를 입력 받기 위한 조건문
  # 맞으면 'y', 아니면 'n', Skip이면 's'
  # 'n'의 경우 'f_ks_pre_head', 'f_ks_pre_body' 함수를 다시 불러옴.
  echo
  echo -ne "- Do you want to set the Hostname and Network? (y/n/s): "
  read hostname_network_info

  case ${hostname_network_info} in
      y|Y|yes|YES)
 	  # Hostname 입력 받기
          echo
	  echo -ne "- Hostname    : "
          read HOST_NAME

	  # IP 주소 입력 받기
	  echo -ne "- IP Address  : "
          read IPADDR

	  # Netmask 정보 입력 받기
  	  echo -ne "- Netmask     : "
	  read NETMASK

	  # Gateway 정보 입력 받기
	  echo -ne "- Gateway     : "
          read GATEWAY
	  echo "##############################################################"
      ;;

      n|N|no|NO)
          clear
	  # Recursive
	  f_ks_pre_head
	  f_ks_pre_body
      ;;

      s|S|skip|SKIP)
          echo
          echo 'Wait 2 sec..'
          sleep 2
      ;;
  esac

  # Network interface명의 biosname에 대한 조건문
  echo
  echo -ne "- Do you want to disable the biosname of network interface? \n"
  echo -ne "- ex) y : eth0 \n"
  echo -ne "- ex) n : enp0s1 \n"
  echo -ne "- Answer (y/n): "
  read network_biosname
  case ${network_biosname} in
      y|Y|yes|YES)
          echo 'y' > /tmp/network_biosname
      ;;

      n|N|no|NO)
          echo 'n' > /tmp/network_biosname
      ;;
  esac

  # Network Bonding을 사용 할 경우에 대한 조건문
  echo
  echo -ne "- Do you want to set the network bonding? (y/n): "
  read network_bonding
  case ${network_bonding} in
      y|Y|yes|YES)
          echo 'y' > /tmp/network_bonding

	  # Network Bonding에 VLAN을 사용 할 경우에 대한 조건문
          echo
          echo -ne "- Using VLAN on network bonding? (y/n): "
          read network_bonding_vlan

          case ${network_bonding_vlan} in
              y|Y|yes|YES)
                  echo 'y' > /tmp/network_bonding_vlan
 
                  # VLAN Tag Number를 입력 받음.
                  echo -ne "- Please enter the VLAN TAG Number. \n"
                  echo -ne "- ex) 1501 \n"
                  echo -ne "- VLAN TAG Number : "
                  read network_bonding_vlan_tag_number
                  echo "$network_bonding_vlan_tag_number" > /tmp/network_bonding_vlan_tag_number

	      ;;

              n|N|no|NO)
                  echo 'n' > /tmp/network_bonding_vlan
              ;;
          esac
	  
      ;;

      n|N|no|NO)
          echo 'n' > /tmp/network_bonding
      ;;
  esac

  # runlevel을 multi-user(3), graphical(5) 중에 어떤 것을 설정 할지에 대한 조건문
  echo
  echo -ne "- Choose runlevel number. (3/5): \n"
  echo -ne "- ex) 3 = Full multiuser mode \n"
  echo -ne "- ex) 5 = X11 \n"
  echo -ne "- Input: "
  read runlevel

  case ${runlevel} in
      3)
          echo '3' > /tmp/runlevel
      ;;

      5)
          echo '5' > /tmp/runlevel
      ;;
  esac

  # OpenJDK를 설정 할건지에 대한 조건문
  echo
  echo -ne "- Do you want to set the Open Java Development Kit (OpenJDK)? (y/n): "
  read openjdk

  case ${openjdk} in
      y|Y|yes|YES)
          echo 'y' > /tmp/openjdk
      ;;

      n|N|no|NO)
          echo 'n' > /tmp/openjdk
      ;;
  esac

  # 확인 단계
  # 사용자로 부터 입력 받은 값에 대해 다시 한번 물어 보는 단계
  # 맞으면 'y', 아니면 'n', Skip이면 's'
  # 'n'의 경우 'f_ks_pre_head', 'f_ks_pre_body' 함수를 다시 불러옴.
  echo
  echo -ne "- Are you sure? (y/n/s): "
  read are_you_sure

  case ${are_you_sure} in
      y|Y|yes|YES)
          echo
          echo "$HOST_NAME $IPADDR $NETMASK $GATEWAY" > /tmp/network
          echo 'Wait 2 sec..'
          sleep 2
      ;;

      n|N|no|NO)
          clear

          # 변수 초기화
          unset HOST_NAME IPADDR NETMASK GATEWAY
          rm -f /tmp/{network*,package*,openjdk,runlevel}

          # Recursive
          f_ks_pre_head
          f_ks_pre_body
      ;;

      s|S|skip|SKIP)
          # 변수 초기화
          unset HOST_NAME IPADDR NETMASK GATEWAY
          rm -f /tmp/{network*,package*,openjdk,runlevel}

          echo
          echo 'Wait 2 sec..'
          sleep 2
      ;;
  esac
}

# Pre 함수 실행
f_ks_pre_head
f_ks_pre_body

chvt 1
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1
%end

######################################################
#                      Package                       #
######################################################
# 패키지
%packages
@base
@compat-libraries
@core
@debugging
@development
@file-server
@fonts
@ftp-server
@gnome-desktop
@graphical-admin-tools
@hardware-monitoring
@input-methods
@java-platform
@large-systems
@network-file-system-client
@network-tools
@performance
@perl-runtime
@remote-system-management
@ruby-runtime
@x11
arptables
arpwatch
conman
chrony
crypto-utils
dos2unix
dropwatch
ebtables
expect
freeipmi
genisoimage
ipmitool
ipset
iptraf-ng
iptstate
kexec-tools
ksh
lsscsi
mc
mrtg
netsniff-ng
nmap
OpenIPMI
pexpect
rsh
rsh-server
screen
sg3_utils
syslinux
symlinks
tcp_wrappers
telnet
telnet-server
tree
watchdog
wireshark
wireshark-gnome
-fprintd-pam
-gnome-initial-setup
glibc.i686
glibc-devel.i686
libaio.i686
libaio-devel.i686
libaio-devel
libgcc.i686
libstdc++.i686
libstdc++-devel.i686
libXi.i686
libXtst.i686
%end

######################################################
#                  Post script #01                   #
######################################################
# RAM disk에서 생성 된 파일을 복사
# Pre script에서 사용자로 부터 입력 받은 변수가 저장된
# 파일을 실제 Product 디렉토리에 저장
%post --nochroot
cp /tmp/{network*,package*,openjdk,runlevel} /mnt/sysimage/tmp
%end

######################################################
#                  Post script #02                   #
######################################################
# Product의 설정 파일을 고객의 요구 사항에 맞도록 변경
%post

# Bash 스크립트 사용
#!/bin/bash
export PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"

# 전역 변수 선언
OPENJDK="$(cat /tmp/openjdk)"
RUNLEVEL="$(cat /tmp/runlevel)"
PKG_UPDATES="$(cat /tmp/package_updates)"

# Hostname & Network
IPADDR="$(cat /tmp/network | awk '{ printf $2 }')"
NETMASK="$(cat /tmp/network | awk '{ printf $3 }')"
GATEWAY="$(cat /tmp/network | awk '{ printf $4 }')"
HOST_NAME="$(cat /tmp/network | awk '{ printf $1 }')"
NETWORK_BIOSNAME="$(cat /tmp/network_biosname)"

# Network Channel Bonding & VLAN
IFACE_BONDING_NAME="ifcfg-bond0"
IFACE_BONDING="$(cat /tmp/network_bonding)"
IFACE_CONFIG_DIR="/etc/sysconfig/network-scripts"
IFACE_BONDING_VLAN="$(cat /tmp/network_bonding_vlan)"
IFACE_NUMBERS="$(ip a s | grep '<' | grep -v 'lo' | grep 'eth' | wc -l)"
IFACE_BONDING_VLAN_TAG_NUMBER="$(cat /tmp/network_bonding_vlan_tag_number)"

# Config file
CRONTAB_CONF="/etc/crontab"
KDUMP_CONF="/etc/kdump.conf"
LVM_CONF="/etc/lvm/lvm.conf"
RUNLEVEL_CONF="/etc/inittab"
GRUB_CONF="/etc/default/grub"
SYSCTL_CONF="/etc/sysctl.conf"
SSH_CONF="/etc/ssh/ssh_config"
SSHD_CONF="/etc/ssh/sshd_config"
SELINUX_CONF="/etc/selinux/config"
NPROC_CONF="/etc/security/limits.d/20-nproc.conf"
NETWORK_MANAGER_CONF="/etc/NetworkManager/NetworkManager.conf"

# Site별 설정 함수
function f_site_a {
  # Hostname 변경
  echo "$HOST_NAME" > /etc/hostname

  # Disable SELinux
  sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' $SELINUX_CONF
  
  # SSH Key 생성
  # 사용자로 부터 입력 받은 IP 범위내의 호스트를 제어하기 위한 설정.
  #ssh-keygen -P '' -f /root/.ssh/id_rsa
  #cat /root/.ssh/id_rsa.pub > /root/.ssh/authorized_keys && chmod 644 /root/.ssh/authorized_keys

  # Host의 키 확인을 하지 않도록 설정
  sed -i 's/#   StrictHostKeyChecking ask/    StrictHostKeyChecking no/g' $SSH_CONF

  # Disable UseDNS for SSHD
  sed -i 's/#UseDNS yes/UseDNS no/g' $SSHD_CONF

  # Disable network manager plugin
  sed -i 's/plugins/#plugins/g' $NETWORK_MANAGER_CONF

  # Security
  sed -i 's/\*/#\*/g'     $NPROC_CONF
  sed -i 's/root/#root/g' $NPROC_CONF

  # Mail
  sed -i 's/MAILTO=root/MAILTO=""/g' $CRONTAB_CONF

  # LVM meta daemon 
  sed -i 's/use_lvmetad = 1/use_lvmetad = 0/g' $LVM_CONF

  # Magic SysRq key & Kdump
  sed -i 's/path \/var\/crash/path \/CRASH/'      $KDUMP_CONF
  sed -i 's/kernel.sysrq = 0/kernel.sysrq = 1/g'  $SYSCTL_CONF
  echo 'kernel.panic_on_io_nmi = 1'          >>   $SYSCTL_CONF
  echo 'kernel.unknown_nmi_panic = 1'        >>   $SYSCTL_CONF
  echo 'kernel.panic_on_unrecovered_nmi = 1' >>   $SYSCTL_CONF

  # runlevel 변경
  #   3 - Full multiuser mode
  #   5 - X11
  if [ "$RUNLEVEL" == "3" ]; then
      systemctl set-default multi-user.target

  elif [ "$RUNLEVEL" == "5" ]; then
      systemctl set-default graphical.target

  else
      systemctl set-default multi-user.target
  fi

  # biosname
  if [ "$NETWORK_BIOSNAME" == "y" ]; then
      sed -i '/^GRUB_CMDLINE_LINUX/ s:.*:GRUB_CMDLINE_LINUX=\"crashkernel=auto rhgb quiet net.ifnames=0 biosdevname=0\":' $GRUB_CONF
      grub2-mkconfig -o /boot/grub2/grub.cfg
  fi

  # Network 인터페이스 설정
  # Default
  function f_interface_default {
    # Interface 파일 생성
    for ((i=0; i<$IFACE_NUMBERS; i++)); do
        # Interface MAC 주소
        IFACE_MAC_ADDR="$(cat /sys/class/net/eth$i/address)"

        echo "# eth$i"                                             > $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "TYPE=Ethernet"                                      >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "DEVICE=eth$i"                                       >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "HWADDR=$IFACE_MAC_ADDR"                             >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "ONBOOT=no"                                          >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "BOOTPROTO=static"                                   >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "USERCTL=no"                                         >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "NM_CONTROLLED=no"                                   >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "#IPADDR=$IPADDR"                                    >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "#NETMASK=$NETMASK"                                  >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "#GATEWAY=$GATEWAY"                                  >> $IFACE_CONFIG_DIR/ifcfg-eth$i
    done
  }
  
  # Bonding
  function f_bonding {
    echo "alias bond0 bonding"                                     > $MODPROBE_BONDING_CONF
    echo "# Bonding"                                               > $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "TYPE=Bond"                                              >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "DEVICE=bond0"                                           >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "ONBOOT=yes"                                             >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "BOOTPROTO=none"                                         >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "USERCTL=no"                                             >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "NM_CONTROLLED=no"                                       >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "BONDING_OPTS=\"mode=1 miimon=100\""                     >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "IPADDR=$IPADDR"                                         >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "NETMASK=$NETMASK"                                       >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "GATEWAY=$GATEWAY"                                       >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME

    # Interface 파일 생성
    for ((i=0; i<$IFACE_NUMBERS; i++)); do
        # Interface MAC 주소
        IFACE_MAC_ADDR="$(cat /sys/class/net/eth$i/address)"

        echo "# Slave"                                             > $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "TYPE=Ethernet"                                      >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "DEVICE=eth$i"                                       >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "HWADDR=$IFACE_MAC_ADDR"                             >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "ONBOOT=no"                                          >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "BOOTPROTO=none"                                     >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "USERCTL=no"                                         >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "NM_CONTROLLED=no"                                   >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "#MASTER=bond0"                                      >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "#SLAVE=yes"                                         >> $IFACE_CONFIG_DIR/ifcfg-eth$i
    done
  }

  # Bonding + VLAN
  function f_bonding_vlan {
    echo "alias bond0 bonding"                                     > $MODPROBE_BONDING_CONF
    echo "# Bonding"                                               > $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "TYPE=Bond"                                              >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "DEVICE=bond0"                                           >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "ONBOOT=yes"                                             >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "BOOTPROTO=none"                                         >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "USERCTL=no"                                             >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "NM_CONTROLLED=no"                                       >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME
    echo "BONDING_OPTS=\"mode=1 miimon=100\""                     >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME

    # VLAN
    echo "# Bonding VLAN"                                          > $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME.$IFACE_BONDING_VLAN_TAG_NUMBER
    echo "DEVICE=bond0.$IFACE_BONDING_VLAN_TAG_NUMBER"            >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME.$IFACE_BONDING_VLAN_TAG_NUMBER
    echo "ONBOOT=yes"                                             >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME.$IFACE_BONDING_VLAN_TAG_NUMBER
    echo "BOOTPROTO=none"                                         >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME.$IFACE_BONDING_VLAN_TAG_NUMBER
    echo "USERCTL=no"                                             >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME.$IFACE_BONDING_VLAN_TAG_NUMBER
    echo "NM_CONTROLLED=no"                                       >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME.$IFACE_BONDING_VLAN_TAG_NUMBER
    echo "VLAN=yes"                                               >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME.$IFACE_BONDING_VLAN_TAG_NUMBER
    echo "IPADDR=$IPADDR"                                         >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME.$IFACE_BONDING_VLAN_TAG_NUMBER
    echo "NETMASK=$NETMASK"                                       >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME.$IFACE_BONDING_VLAN_TAG_NUMBER
    echo "GATEWAY=$GATEWAY"                                       >> $IFACE_CONFIG_DIR/$IFACE_BONDING_NAME.$IFACE_BONDING_VLAN_TAG_NUMBER

    # Interface 파일 생성
    for ((i=0; i<$IFACE_NUMBERS; i++)); do
        # Interface MAC 주소
        IFACE_MAC_ADDR="$(cat /sys/class/net/eth$i/address)"

        echo "# Slave"                                             > $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "TYPE=Ethernet"                                      >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "DEVICE=eth$i"                                       >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "HWADDR=$IFACE_MAC_ADDR"                             >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "ONBOOT=no"                                          >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "BOOTPROTO=none"                                     >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "USERCTL=no"                                         >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "NM_CONTROLLED=no"                                   >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "#MASTER=bond0"                                      >> $IFACE_CONFIG_DIR/ifcfg-eth$i
        echo "#SLAVE=yes"                                         >> $IFACE_CONFIG_DIR/ifcfg-eth$i
    done
  }

  # Bonding을 사용하는 경우
  if [ "$IFACE_BONDING" == "y" ]; then
      f_bonding

      # Bonding을 사용할때 VLAN도 같이 사용하는 경우
      if [ "$IFACE_BONDING_VLAN" == "y" ]; then
          f_bonding_vlan
      fi

  else
      f_interface_default
  fi

  # OpenJDK 설정
  if [ "$OPENJDK" == "y" ]; then
      echo ''                                    >> /etc/profile
      echo '# OpenJDK'                           >> /etc/profile
      echo 'export JAVA_HOME="/usr/lib/jvm/jre"' >> /etc/profile
      echo 'export PATH=$PATH:$JAVA_HOME/bin'    >> /etc/profile
  fi

  # 불필요 데몬 비활성화
  DAEMON_LIST="NetworkManager.service abrt-ccpp.service abrtd.service abrt-oops.service abrt-vmcore.service abrt-xorg.service atd.service auditd.service avahi-daemon.service bluetooth.service firewalld.service iscsi.service ksm.service ksmtuned.service libvirtd.service mdmonitor.service postfix.service rhsmcertd.service rngd.service smartd.service spice-vdagentd.service tuned.service"
  for daemon in $DAEMON_LIST; do
      systemctl disable $daemon off
  done

  chkconfig rhnsd off
}

# Post #02 함수 실행
f_site_a
%end

######################################################
#                  Post script #03                   #
######################################################
%post
  # Mount
  mount /dev/sr0 /mnt

  # 업데이트 repo 파일 복사
  mv /etc/yum.repos.d/*.repo /opt
  cp /mnt/rockplace/repofiles/updates.repo /etc/yum.repos.d

  # 패키지 업데이트
  yum clean all && yum repolist && yum -y update && yum clean all
  rm -f /etc/yum.repos.d/updates.repo
  mv /opt/*.repo /etc/yum.repos.d

  # Unmount
  sleep 2
  umount /dev/sr0
%end

######################################################
#                  Post script #04                   #
######################################################
# 로그 및 그외 설정
%post
# Anaconda 및 Install 로그 삭제
rm -f /tmp/{ks*,yum*,systemd*,network*,package*,openjdk,runlevel}
rm -f /root/{anaconda-ks.cfg,install.log,install.log,syslog*}
%end

# 시스템 재부팅
reboot